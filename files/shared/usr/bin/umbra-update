#!/usr/bin/env bash
# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Status tracking
declare -A section_status

header() {
    echo -e "${PURPLE}"
    echo "##########################################"
    echo -e "${BLUE} $1${PURPLE}"
    echo "##########################################"
    echo -e "${NC}"
}

status_report() {
    echo
    header "FINAL STATUS REPORT"
    printf "%-12s %-10s\n" "Section" "Status"
    echo "------------------------------"
    for section in "${!section_status[@]}"; do
        printf "%-12s %b\n" "$section" "${section_status[$section]}"
    done
    echo
}

header "BASE IMAGE"

if sudo bootc upgrade; then
    echo
    echo -e "${GREEN}✓ Base image updated successfully${NC}"
    section_status["base_image"]="${GREEN}SUCCESS${NC}"
else
    echo
    echo -e "${RED}✗ Failed to update base image${NC}"
    section_status["base_image"]="${RED}FAILED${NC}"
fi

header "FLATPAKS"

if flatpak update -y; then
    echo
    echo -e "${GREEN}✓ Flatpaks updated successfully${NC}"
    section_status["flatpaks"]="${GREEN}SUCCESS${NC}"
else
    echo
    echo -e "${RED}✗ Flatpak updates failed${NC}"
    section_status["flatpaks"]="${RED}FAILED${NC}"
fi


if command -v pip3 &> /dev/null; then
    pip_cmd="pip3"
elif command -v pip &> /dev/null; then
    pip_cmd="pip"
fi


if [ -n "$pip_cmd" ]; then
    header "PYTHON"

    outdated_packages=$($pip_cmd list --user --outdated --not-required --format=freeze 2>/dev/null |
        cut -d= -f1 |
        grep -v '^pip$\|^setuptools$\|^wheel$')

    if [ -z "$outdated_packages" ]; then
        echo
        echo -e "${GREEN}✓ All Python packages up to date${NC}"
        section_status["python"]="${GREEN}SUCCESS${NC}"
    else
        echo -e "${CYAN}Updating packages:${NC}"
        echo "$outdated_packages"
        if $pip_cmd install --user --upgrade $outdated_packages; then
            echo
            echo -e "${GREEN}✓ Python packages updated${NC}"
            section_status["python"]="${GREEN}SUCCESS${NC}"
        else
            echo
            echo -e "${RED}✗ Python package update failed${NC}"
            section_status["python"]="${RED}FAILED${NC}"
        fi
    fi
fi

header "NODE"

if command -v pnpm &> /dev/null; then
    # Get list of global packages (excluding pnpm itself)
    global_packages=$(pnpm list -g --depth 0 --parseable 2>/dev/null |
        awk -F/ '{split($(NF-1), a, "@"); print a[1]}' |
        grep -v '^pnpm$')

    if [ -z "$global_packages" ]; then
        echo
        echo -e "${YELLOW}No global Node.js packages found${NC}"
        section_status["node"]="${YELLOW}SKIPPED${NC}"
    else
        # Check outdated packages using individual lookups
        outdated_packages=()
        for pkg in $global_packages; do
            current=$(pnpm list -g "$pkg" --depth 0 --parseable | awk -F@ '{print $2}')
            latest=$(pnpm info "$pkg" version --silent 2>/dev/null)

            if [ "$current" != "$latest" ] && [ -n "$latest" ]; then
                outdated_packages+=("$pkg")
            fi
        done

        if [ ${#outdated_packages[@]} -eq 0 ]; then
            echo
            echo -e "${GREEN}✓ All Node packages up to date${NC}"
            section_status["node"]="${GREEN}SUCCESS${NC}"
        else
            if pnpm update --global; then
                echo
                echo -e "${GREEN}✓ Node packages updated successfully${NC}"
                section_status["node"]="${GREEN}SUCCESS${NC}"
            else
                echo
                echo -e "${RED}✗ Node package updates failed${NC}"
                section_status["node"]="${RED}FAILED${NC}"
            fi
        fi
    fi
fi

notify-send --urgency=normal --expire-time=500 --icon=/usr/share/umbra/pixmaps/system-logo-white.png --category=system "Umbra Update" "System finished updating"

if [ "$1" = "true" ]; then
    status_report

    echo -e "${BLUE}##########################################${NC}"
    read -p "Do you want to reboot now? (y/N): " choice
    choice="${choice,,}"  # Convert input to lowercase

    if [[ "$choice" =~ ^(y|yes)$ ]]; then
        echo "Rebooting system..."
        sudo systemctl reboot
    else
        echo
        echo -e "${CYAN}Reboot skipped. Changes may require restart.${NC}"
    fi
fi
